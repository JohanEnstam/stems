name: Build and Deploy Worker Service

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'worker/**'
  pull_request:
    branches: [ main, dev ]
    paths:
      - 'worker/**'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  REGISTRY: ${{ secrets.GCP_REGISTRY }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd worker
        python3 -m pip install -r requirements.txt
    
    - name: Run tests (placeholder)
      run: |
        cd worker
        python3 -m pytest || echo "No tests yet"

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Configure Docker
      run: gcloud auth configure-docker $REGISTRY
    
    - name: Build Docker image
      run: |
        cd worker
        docker build -t $REGISTRY/$PROJECT_ID/stems-worker-staging:$GITHUB_SHA .
        docker tag $REGISTRY/$PROJECT_ID/stems-worker-staging:$GITHUB_SHA $REGISTRY/$PROJECT_ID/stems-worker-staging:latest
    
    - name: Push Docker image
      run: |
        cd worker
        docker push $REGISTRY/$PROJECT_ID/stems-worker-staging:$GITHUB_SHA
        docker push $REGISTRY/$PROJECT_ID/stems-worker-staging:latest
    
    - name: Deploy to Cloud Run (Staging)
      run: |
        gcloud run deploy stems-worker-staging \
          --image $REGISTRY/$PROJECT_ID/stems-worker-staging:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory 1Gi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 2 \
          --set-env-vars ENVIRONMENT=staging,BUCKET_NAME=${{ secrets.GCP_BUCKET_NAME }},REGION=${{ secrets.GCP_REGION }}
    
    - name: Get staging URL
      id: staging-url
      run: |
        SERVICE_URL=$(gcloud run services describe stems-worker-staging --region=$REGION --format='value(status.url)')
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "Staging worker deployed at: $SERVICE_URL"
    
    - name: Test staging deployment
      run: |
        sleep 30  # Wait for deployment to be ready
        curl -f ${{ steps.staging-url.outputs.url }}/health || exit 1

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Configure Docker
      run: gcloud auth configure-docker $REGISTRY
    
    - name: Build Docker image
      run: |
        cd worker
        docker build -t $REGISTRY/$PROJECT_ID/stems-worker:$GITHUB_SHA .
        docker tag $REGISTRY/$PROJECT_ID/stems-worker:$GITHUB_SHA $REGISTRY/$PROJECT_ID/stems-worker:latest
    
    - name: Push Docker image
      run: |
        cd worker
        docker push $REGISTRY/$PROJECT_ID/stems-worker:$GITHUB_SHA
        docker push $REGISTRY/$PROJECT_ID/stems-worker:latest
    
    - name: Deploy to Cloud Run (Production)
      run: |
        gcloud run deploy stems-worker \
          --image $REGISTRY/$PROJECT_ID/stems-worker:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory 2Gi \
          --cpu 2 \
          --min-instances 0 \
          --max-instances 5 \
          --set-env-vars ENVIRONMENT=production,BUCKET_NAME=${{ secrets.GCP_BUCKET_NAME }},REGION=${{ secrets.GCP_REGION }}
    
    - name: Get production URL
      id: production-url
      run: |
        SERVICE_URL=$(gcloud run services describe stems-worker --region=$REGION --format='value(status.url)')
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "Production worker deployed at: $SERVICE_URL"
    
    - name: Test production deployment
      run: |
        sleep 30  # Wait for deployment to be ready
        curl -f ${{ steps.production-url.outputs.url }}/health || exit 1
